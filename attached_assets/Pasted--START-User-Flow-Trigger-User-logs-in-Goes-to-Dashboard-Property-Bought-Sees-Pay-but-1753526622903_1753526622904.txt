
🔰 START: User Flow Trigger
✅ User logs in

✅ Goes to Dashboard ➝ Property Bought

✅ Sees "Pay" button on a property with status "accepted"

🟢 Clicks on "Pay" → navigates to /dashboard/user/pay/:offerId

🏗️ Frontend Tasks
1. Set Up Stripe
 Install:
npm install @stripe/react-stripe-js @stripe/stripe-js

 Create Stripe account and get publishable key

 Create .env with:

ini
Copy
Edit
VITE_STRIPE_PUBLISHABLE_KEY=pk_test_...
2. Create Payment Page
 Create a route: /dashboard/user/pay/:offerId

 Create a component: PaymentPage.jsx

 Wrap with <Elements> from Stripe:

jsx
Copy
Edit
<Elements stripe={loadStripe(publishableKey)}>
  <PaymentForm offer={offerData} />
</Elements>
3. Create PaymentForm Component
 Use CardElement, useStripe, useElements

 On useEffect, send POST to /create-payment-intent with offer.amount

 Get clientSecret back

 On form submit:

 Call stripe.confirmCardPayment(clientSecret)

 On success: PATCH /offer-payment/:id with transactionId

🧪 Backend Tasks
1. Install Stripe
bash
Copy
Edit
npm install stripe
2. Set Stripe Secret Key
 In .env:

ini
Copy
Edit
STRIPE_SECRET_KEY=sk_test_...
3. Create Payment Intent Route
 POST /api/create-payment-intent

 Body: { amount }

 Return clientSecret

4. Create Offer Update Route
 PATCH /api/offer-payment/:id

 Body: { transactionId }

 Set:

js
Copy
Edit
{
  status: "bought",
  transactionId: "pi_123..."
}
🧠 Database Tasks (MongoDB)
 Ensure Offers collection has:

status: pending | accepted | bought

offerAmount

transactionId (nullable)

🧪 Testing Tasks
 Use Stripe test card: 4242 4242 4242 4242

 Use valid expiry date, CVC, ZIP

 Check Stripe Dashboard ➝ Test mode ➝ Payments

 Ensure MongoDB status: bought and transactionId saved

✅ Post-Payment Tasks
 Replace "Pay" button with:

“Paid”

Transaction ID: pi_123...

 Show toast: "Payment successful!"

✅ Final Flow Recap (Plain Language)
User makes an offer

Agent accepts the offer

User clicks Pay

Stripe processes payment

Backend updates DB

UI shows payment success and transaction ID

📎 Optional (Bonus)
 Add payment date in DB

 Prevent duplicate payments

 Use React Toasts for all success/error

 Add loading spinner while payment is processing